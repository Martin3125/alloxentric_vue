from datetime import datetime
from typing import Optional
from datetime import date, time, datetime
from typing import List
from pydantic import BaseModel, EmailStr, constr

# Definici√≥n del modelo de usuario
class User(BaseModel):
    nombre: constr(max_length=16)
    email: EmailStr
    pwd: constr(min_length=6, max_length=12)
    confirm_password: constr(min_length=6, max_length=12)   # Este campo es opcional

class LoginUser(BaseModel):
    email: EmailStr
    pwd: constr(min_length=6, max_length=12)

# Model for individual actions
class AccionCobranza(BaseModel):
    Id_accion: Optional[str]  # Optional because it will be generated by MongoDB
    accion_cobranza: str
    fecha_cobranza: str
    intervalo: int
    valor: float


class Deudor(BaseModel):
    ID_deudor: int
    nombre_deudor: str
    numtelefono: str
    email: EmailStr
    Deuda: float

class Archivos(BaseModel):
    Id_archivo: Optional[str] 
    nombre: str
    fecha: str

class Procesamiento(BaseModel):
    Id_procesamiento: Optional[str] 
    nombre: str
    fecha: date
    hora: time

# Modelo para las predicciones
class Prediccion(BaseModel):
    accion_predicha: str
    total_deudores: int

# class Resultados(BaseModel):
    # Id_resultados: int
    # nombre: str
    # fecha: str
    # registro: int
    # tipo: str
    # cantidad: str
    # precio: float
    # predicciones: List[Prediccion]

class Resultados(BaseModel):
    id_procesamiento: str
    documento_cargado: str
    fecha_carga: str
    registro_deudores: int
    accion_predicha: str
    deudores: str
    deudores_contactar: int
    precio: float



class Reporte(BaseModel):
    ID_deudor: Optional[str]
    nombre_deudor: str 
    accion: str  
    fecha_envio: date
    intervalo: str 
    fecha_estimada: date
    demora: str  
    fecha_real: date
    debe_pagar: float
    valor_pagar: float
 
class Modelo(BaseModel):
    pond_sin_acciones: float
    pond_correo_electronico: float
    pond_sms: float
    pond_whatsapp: float
    pond_llamada_por_bot: float
    pond_llamada_directa: float
    pond_acciones_judiciales: float
    n_samples: int

class KMeansModel(BaseModel):
    model_name: str  
    model_file: str
    created_at: datetime

class Pago(BaseModel):
    id_pago: int  
    user: str
    nombreEs: str  
    h_inicio: str  
    fecha_Pago: str 
    totalPago: str 
    
# Modelo Pydantic para crear un directorio
class Directorio(BaseModel):
    nombre_directorio: str